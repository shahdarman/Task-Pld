!==========================================
! Gold Parser Grammar - Python/Ruby Inspired Mix (Corrected)
!==========================================


"Start Symbol" = <Start>

!------------------------------------------
! Section 1: Tokens (Terminals)
!------------------------------------------
Tokens = {
    if = { Regex = 'if' }
    else = { Regex = 'else' }
    For = { Regex = 'For' } 
    Pass = { Regex = 'pass' } 
    int = { Regex = 'int' }
    float = { Regex = 'float' }
    double = { Regex = 'double' }
    string = { Regex = 'string' }
    Assign = { Regex = '=' }
    Plus = { Regex = '\+' }
    Minus = { Regex = '\-' }
    Multiply = { Regex = '\*' }
    Divide = { Regex = '\/' }
    Modulo = { Regex = '%' }
    Power = { Regex = '\*\*' }
    Semicolon = { Regex = ';' } 
    Colon = { Regex = ':' }     

    ! Comparison Operators (from your original code)
    LessThan = { Regex = '<' }
    GreaterThan = { Regex = '>' }
    Equality = { Regex = '==' }
    Inequality = { Regex = '!=' }

    ! Parentheses
    LParen = { Regex = '\(' }
    RParen = { Regex = '\)' }

    ! Increment/Decrement Operators (from your original code)
    Increment = { Regex = '\+\+' }
    Decrement = { Regex = '\-\-' }

    ! Identifiers (variable names)
    Id = { Regex = '[_a-zA-Z][_a-zA-Z0-9]*' } ! Standard regex for identifiers
    
    ! Numeric Literals (from your original code, adjusted to standard regex)
    Digit = { Regex = '(\+|\-)?\d+(\.\d+)?([eE](\+|\-)?\d+)?' } ! Standard regex for numbers
    
    ! String Literals (Added for common language features)
    StringLiteral = { Regex = '"(?:[^"\\]|\\.)*"' | "'(?:[^'\\]|\\.)*'" }

    ! Whitespace and Newlines are crucial for block structure
    Whitespace = { Regex = '[ \t]+', Hidden = True, Except = '\n' } ! Ignore spaces/tabs, but not newlines
    Newline = { Regex = '\n+' } ! Newlines are significant statement terminators
    
    ! INDENT and DEDENT (These MUST be generated by an external Lexer)
    INDENT = { Regex = '', Hidden = True } ! Regex here is just a placeholder
    DEDENT = { Regex = '', Hidden = True } ! The Lexer generates these tokens
} 


!------------------------------------------
! Section 2: Rules (Non-terminals)
! These define the grammatical structure of your language.
!------------------------------------------

<program> ::= <Statements> ! A program is a sequence of statements

<Statements> ::= <Statement> <Newline> <Statements> | <Statement> | <Newline> <Statements> | epsilon
              ! Allows multiple statements, empty lines, and an empty program (epsilon)

<Statement> ::= <AssignmentStatement>
              | <IfStatement>
              | <ForStatement>
              | <PassStatement>

! Assignment Statement (similar to your original, but semicolon is optional here for Pythonic feel)
<AssignmentStatement> ::= Id Assign <Expression> Semicolon? ! Semicolon is optional

! <id> rule removed; 'Id' terminal is used directly.

! Expressions (from your original code, structured for standard operator precedence)
<Expression> ::= <Expression> Plus <Term>
               | <Expression> Minus <Term>
               | <Term>
         
<Term> ::= <Term> Multiply <Factor>
         | <Term> Divide <Factor>
         | <Term> Modulo <Factor>
         | <Factor>
         
<Factor> ::= <Factor> Power <Exp>
           | <Exp>
           
<Exp> ::= LParen <Expression> RParen
        | Id
        | Digit
        | StringLiteral ! Added support for string literals in expressions

! <digit> rule removed; 'Digit' terminal is used directly.

!------------------------------------------
! If Statement - Python/Ruby Style
! Uses Colon, Newline, INDENT, DEDENT for blocks.
!------------------------------------------
<IfStatement> ::= if <Condition> Colon <Newline> INDENT <Statements> DEDENT <ElseClause>

<ElseClause> ::= else Colon <Newline> INDENT <Statements> DEDENT | epsilon ! Optional else block

<Condition> ::= <Expression> <Operator> <Expression>
            
<Operator> ::= LessThan
             | GreaterThan
             | Equality
             | Inequality

!------------------------------------------
! For Statement 
!------------------------------------------
<ForStatement> ::= For LParen <DataDeclaration> <AssignmentStatementPart> Semicolon <Condition> Semicolon <Step> RParen Colon <Newline> INDENT <Statements> DEDENT

<AssignmentStatementPart> ::= Id Assign <Expression> ! A part of assignment without semicolon

<DataDeclaration> ::= int | float | double | string

<Step> ::= Decrement Id
         | Id Decrement
         | Id Increment
         | Increment Id
         | <AssignmentStatementPart> ! Allow an assignment as a step

!------------------------------------------
! Pass Statement (for empty blocks)
!------------------------------------------
<PassStatement> ::= Pass
